<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
							http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
							http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
							http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
							http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
							default-init-method="init"><!-- default-autowire="byName" 导致mybaitis 无法读取db.properties${} -->

	<context:component-scan base-package="com.youny.*.dao.impl" />
	<context:component-scan base-package="com.youny.*.mapper" />
	<!-- 配置项目中的dao -->
	<aop:aspectj-autoproxy />
     
     
	<!-- hibernate数据源  -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName">
			<value>${db.connection.driver_class}</value>
		</property>
		<property name="url">
			<value>${db.connection.url}</value>
		</property>
		<property name="username">
			<value>${db.connection.username}</value>
		</property>
		<property name="password">
			<value>${db.connection.password}</value>
		</property>
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="300" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="2" />
		<!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="1" />
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref local="dataSource"/>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.youny.*.bo</value>
			</list>
		</property>
		<property name="hibernateProperties" ref="hibernateProperties"/>
		<property name="lobHandler" ref="lobHandler"/>
	</bean>

	<!-- If we opt to use JTA transactions, we could replace this with the JTATransactionManager or
	configure Hibernante to work with JTATransactions and keep this as is. -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory"/>
		</property>
		<property name="defaultTimeout" value="1000" />
	</bean>

	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="txManager"/>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" timeout="5" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" timeout="5" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" timeout="5" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" timeout="5" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" timeout="5" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" timeout="5" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>

	<!-- ensure that the above transactional advice runs for any execution of
	an operation defined by the *Service interface -->
	<aop:config>
		<aop:pointcut id="gaeaServiceOperation" expression="execution(* com.youny..service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="gaeaServiceOperation" />
	</aop:config>
	
	
	<bean id="mybatisDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName">
			<value>${db.connection.driver_class}</value>
		</property>
		<property name="url">
			<value>${db.connection.url}</value>
		</property>
		<property name="username">
			<value>${db.connection.username}</value>
		</property>
		<property name="password">
			<value>${db.connection.password}</value>
		</property>
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="300" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="2" />
		<!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="1" />
	</bean>
	
	<!-- mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="mybatisDataSource" />
		<property name="mapperLocations" value="classpath:com/youny/*/mapper/*.xml" />
	</bean>
	
	 <!-- mybatis自动扫描包下的mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.youny.user.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!-- spring 事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="mybatisDataSource" />
	</bean>
	
    <!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性 -->  
	<tx:annotation-driven transaction-manager="transactionManager" />
    <!-- 事务控制的业务方法配 --> 
    <tx:advice id="txAdvices" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="get*" propagation="REQUIRED" timeout="5" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" timeout="5" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" timeout="5" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" timeout="5" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" timeout="5" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" timeout="5" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="*" propagation="SUPPORTS"/> 
        </tx:attributes>  
    </tx:advice>
   
    <aop:config proxy-target-class="true">  
        <aop:advisor pointcut="execution(* com.youny..service.*.*(..))"  
        advice-ref="txAdvices" />  
    </aop:config>  
      
	



</beans>

